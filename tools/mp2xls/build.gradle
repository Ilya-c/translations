/*
 * Copyright 2015 Haulmont
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

def branchVersion = '0.1'

allprojects {
    ext.artifactGroup = 'com.haulmont.mp2xls'
    ext.artifactVersion = branchVersion
    ext.isSnapshot = true
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'

mainClassName = 'com.haulmont.mp2xls.MessagePropertiesProcessor'

repositories {
    maven {
        url 'https://repo.cuba-platform.com/content/groups/work'
        credentials {
            username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
            password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
        }
    }
}

dependencies {
    compile(group: 'com.haulmont.thirdparty', name: 'poi', version: '3.9.20130515')
    compile(group: 'commons-lang', name: 'commons-lang', version: '2.3')
    compile('commons-cli:commons-cli:1.3.1')
    compile('org.apache.commons:commons-configuration2:2.1.1');
    compile('commons-beanutils:commons-beanutils:1.9.3');
}

sourceSets {
    main {
        java { srcDir 'src' }
        resources { srcDir 'src' }
    }
}

distZip {
    destinationDir = new File("$buildDir/install")
}

task read(dependsOn: ['assemble'], description: 'Read properties ') << {
    def mod = '--read'
    def sourceDir = rootProject.hasProperty('sourceDir') ? rootProject.sourceDir : ''
    def outputFile = rootProject.hasProperty('outputFile') ? rootProject.outputFile : ''
    def scanLanguages = rootProject.hasProperty('scanLanguages') ? rootProject.scanLanguages : ''
    project.javaexec {
        main = 'com.haulmont.mp2xls.MessagePropertiesProcessor'
        classpath(rootProject.sourceSets.main.compileClasspath, rootProject.sourceSets.main.output.classesDir, rootProject.sourceSets.main.output.resourcesDir)
        args = ["$mod", "--sourceDir=$sourceDir", "--outputFile=$outputFile", "--scanLanguages=$scanLanguages"]
    }
}

task write(dependsOn: ['assemble'], description: 'Write properties ') << {
    def mod = '-write'
    def sourceDir = rootProject.hasProperty('sourceDir') ? rootProject.sourceDir : ''
    def lcFile = rootProject.hasProperty('lcFile') ? rootProject.lcFile : ''
    def logFile = rootProject.hasProperty('logFile') ? rootProject.logFile : ''
    def scanLanguages = rootProject.hasProperty('scanLanguages') ? rootProject.scanLanguages : ''
    project.javaexec {
        main = 'com.haulmont.mp2xls.MessagePropertiesProcessor'
        debug = true
        classpath(rootProject.sourceSets.main.compileClasspath,
                rootProject.sourceSets.main.output.classesDir,
                rootProject.sourceSets.main.output.resourcesDir)
        args = ["$mod", "-projectDir=$sourceDir", "-xlsFile=$lcFile", "-logFile=$logFile", "--languages=$scanLanguages"]
        if(rootProject.hasProperty('overwrite'))
            args += "-overwrite";
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}
